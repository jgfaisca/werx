#!/usr/bin/env node
var debug = require('debug')('log4js-example');
var cluster = require('cluster');
var http2 = require('http2');
var fs = require('fs');
var defaultport = 3443;
var bindaddr = '0.0.0.0'; 
// defaults to CPU core count 
var autoworkers = true;
// used if autoworkers is false   
var defaultworkers = 1; 

// HTTP/2 options
var options = {
  // key and certificate 
  key: fs.readFileSync('./keys/key.pem'),
  cert: fs.readFileSync('./keys/cert.pem'),
  // if true the server will accept connections over plain TCP instead of TLS	 
  plain: false 
};

/**
 * make a log directory, just in case it isn't there.
 */
try {
  require('fs').mkdirSync('./log');
} catch (e) {
  if (e.code != 'EEXIST') {
    console.error("Could not set up log directory, error was: ", e);
    process.exit(1);
  }
}

/**
 * Initialise log4js first, so we don't miss any log messages
 */
var log4js = require('log4js');
log4js.configure('./config/log4js.json');

var log = log4js.getLogger("startup");

/**
 * Start up a cluster 
 */
if (cluster.isMaster) { // Code to run if we're in the master process

  if (autoworkers) {
      // Count the machine's CPUs
      var totalworkers = require('os').cpus().length; 
  } else {
     // Use default workers   
     totalworkers = defaultworkers;
  }

  // Create workers
  console.log("Starting " + totalworkers + " worker(s)...");
  for (var i = 0; i < totalworkers; i += 1) {
     cluster.fork();
  }

  // Listen for dying workers
  cluster.on('exit', function (worker) {
     // Replace the dead worker
     console.log('Worker ' + worker.id + ' died');
     cluster.fork();
  });

} else { // Code to run if we're in a worker process

  var app = require('../app');
  app.set('port', process.env.PORT || defaultport);
  var server = http2.createServer(options, app).listen(defaultport, bindaddr, function(){  
    log.info('Web HTTP/2 server listening on port ', defaultport, " with pid ", process.pid);
    console.log("A worker is now connected to " + bindaddr + ":" + defaultport + " with pid " + process.pid + " and id " + cluster.worker.id);
  });

};
